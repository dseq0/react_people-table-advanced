{"version":3,"sources":["components/Navbar.tsx","App.tsx","components/Pages/HomePage.tsx","components/Pages/PageNotFound.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersonLink.tsx","components/PeopleTable.tsx","api.ts","utils/filteredPeople.ts","components/Pages/PeoplePage.tsx","components/Root.tsx","index.tsx"],"names":["getLinkClass","isActive","classNames","Navbar","className","role","to","App","HomePage","PageNotFound","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","PeopleFilters","setSearchParams","query","get","sex","centuries","getAll","toggleCenturySelection","century","includes","filter","type","placeholder","onChange","e","target","map","length","Loader","PersonLink","person","people","slugId","useParams","findMother","find","mother","motherName","name","findFather","father","fatherName","slug","born","died","PeopleTable","order","sort","getSortType","field","getSortClass","changeSortClass","API_URL","wait","delay","Promise","resolve","setTimeout","getPeople","then","fetch","response","json","PeoplePage","useState","setPeople","isLoading","setIsLoading","hasError","setHasError","updatePeopleList","loadedPeople","useEffect","getFilteredPeople","useMemo","preparedPeople","preparedQuery","trim","toLowerCase","Math","ceil","String","personA","personB","localeCompare","Error","filteredPeople","isTableEmpty","Root","path","element","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.15e84a48.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => classNames(\n  'navbar-item', { 'has-background-grey-lighter': isActive },\n);\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={getLinkClass}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n          <NavLink\n            className={getLinkClass}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const HomePage = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","export const PageNotFound = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchLink } from './SearchLink';\nimport { getSearchWith } from '../utils/searchHelper';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const allCenturies = ['16', '17', '18', '19', '20'];\n  const query = searchParams.get('query') || '';\n  const sex = searchParams.get('sex') || '';\n  const centuries = searchParams.getAll('centuries') || '';\n\n  const handleQueryChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const search = getSearchWith(\n      searchParams, { query: e.target.value || null },\n    );\n\n    setSearchParams(search);\n  };\n\n  const toggleCenturySelection = (century: string) => {\n    return {\n      centuries: centuries.includes(century)\n        ? centuries.filter(value => value !== century)\n        : [...centuries, century],\n    };\n  };\n\n  const resetFilters = () => {\n    return {\n      sex: null,\n      query: null,\n      centuries: [],\n    };\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classNames({ 'is-active': !sex })}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          className={classNames({ 'is-active': sex === 'm' })}\n          params={{ sex: 'm' }}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          className={classNames({ 'is-active': sex === 'f' })}\n          params={{ sex: 'f' }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {allCenturies.map(century => (\n              <SearchLink\n                data-cy=\"century\"\n                params={toggleCenturySelection(century)}\n                className={classNames('button mr-1', {\n                  'is-info': centuries.includes(century),\n                })}\n                key={century}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={classNames('button is-success', {\n                'is-outlined': centuries.length > 0,\n              })}\n              params={{ centuries: [] }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={resetFilters()}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport { useParams, Link } from 'react-router-dom';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person,\n  people: Person[]\n};\n\nexport const PersonLink: React.FC<Props> = ({ person, people }) => {\n  const { slugId } = useParams();\n  const findMother = people.find(\n    mother => person.motherName === mother.name,\n  );\n\n  const findFather = people.find(\n    father => person.fatherName === father.name,\n  );\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames({\n        'has-background-warning': person.slug === slugId,\n      })}\n    >\n      <td>\n        <Link\n          className={classNames(({ 'has-text-danger': person.sex === 'f' }))}\n          to={`/people/${person.slug}`}\n        >\n          {person.name}\n        </Link>\n      </td>\n      <td>{person.sex}</td>\n      <td>{person.born}</td>\n      <td>{person.died}</td>\n      <td>\n        {findMother\n          ? (\n            <Link\n              to={`/people/${findMother.slug}`}\n              className=\"has-text-danger\"\n            >\n              {person.motherName}\n            </Link>\n          ) : (\n            person.motherName || '-'\n          )}\n      </td>\n      <td>\n        {findFather\n          ? (\n            <Link\n              to={`/people/${findFather.slug}`}\n            >\n              {person.fatherName}\n            </Link>\n          ) : (\n            person.fatherName || '-'\n          )}\n      </td>\n    </tr>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../types';\nimport { SearchLink } from './SearchLink';\nimport { PersonLink } from './PersonLink';\n\ntype Props = {\n  people: Person[],\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const [searchParams] = useSearchParams();\n  const order = searchParams.get('order') || '';\n  const sort = searchParams.get('sort') || '';\n\n  const getSortType = (field: string) => {\n    if (!order && sort === field) {\n      return {\n        order: 'desk',\n        sort: field,\n      };\n    }\n\n    if (order && sort === field) {\n      return {\n        order: null,\n        sort: null,\n      };\n    }\n\n    return {\n      order: null,\n      sort: field,\n    };\n  };\n\n  const getSortClass = (changeSortClass: string) => {\n    return classNames(\n      'fas',\n      { 'fa-sort': sort !== changeSortClass },\n      { 'fa-sort-up': sort === changeSortClass && !order },\n      { 'fa-sort-down': sort === changeSortClass && order },\n    );\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <SearchLink\n                params={getSortType('name')}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={getSortClass('name')}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <SearchLink\n                params={getSortType('sex')}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={getSortClass('sex')}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <SearchLink\n                params={getSortType('born')}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={getSortClass('born')}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <SearchLink\n                params={getSortType('died')}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={getSortClass('died')}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <PersonLink\n            key={person.slug}\n            person={person}\n            people={people}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { Person } from '../types';\n\nexport const filteredPeople = (\n  people: Person[],\n  query: string | null,\n  sex: string | null,\n  centuries: string[],\n  sort: string,\n  order: string,\n) => {\n  let preparedPeople = [...people];\n\n  if (query) {\n    const preparedQuery = query.trim().toLowerCase();\n\n    preparedPeople = preparedPeople.filter((person: Person) => {\n      if (person.name.toLowerCase().includes(preparedQuery)\n      || person.fatherName?.toLowerCase().includes(preparedQuery)\n      || person.motherName?.toLowerCase().includes(preparedQuery)) {\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n  if (sex) {\n    preparedPeople = preparedPeople.filter((person: Person) => person.sex\n    === sex);\n  }\n\n  if (centuries.length > 0) {\n    preparedPeople = preparedPeople.filter((person) => {\n      const century = Math.ceil(person.born / 100);\n\n      return centuries.includes(String(century));\n    });\n  }\n\n  if (sort) {\n    preparedPeople.sort((personA: Person, personB: Person) => {\n      switch (sort) {\n        case 'name':\n        case 'sex':\n          return order !== 'desc'\n            ? personA[sort].localeCompare(personB[sort])\n            : personB[sort].localeCompare(personA[sort]);\n\n        case 'born':\n        case 'died':\n          return order !== 'desc'\n            ? personA[sort] - personB[sort]\n            : personB[sort] - personA[sort];\n\n        default:\n          throw new Error(\n            'There are no people matching the current search criteria',\n          );\n      }\n    });\n  }\n\n  return preparedPeople;\n};\n","import { useState, useEffect, useMemo } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from '../PeopleFilters';\nimport { Loader } from '../Loader';\nimport { PeopleTable } from '../PeopleTable';\nimport { Person } from '../../types';\nimport { getPeople } from '../../api';\nimport { filteredPeople } from '../../utils/filteredPeople';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get('query');\n  const sex = searchParams.get('sex');\n  const centuries = searchParams.getAll('centuries');\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n\n  const updatePeopleList = async () => {\n    setIsLoading(true);\n\n    try {\n      const loadedPeople = await getPeople();\n\n      setPeople(loadedPeople);\n    } catch {\n      setHasError(true);\n    }\n\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    updatePeopleList();\n  }, []);\n\n  const getFilteredPeople = useMemo(() => (\n    filteredPeople(people, query, sex, centuries, sort, order)\n  ), [people, query, sex, centuries, sort, order]);\n\n  const isTableEmpty = getFilteredPeople.length === 0\n    && !hasError && !isLoading;\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {people.length > 0 && (\n              <PeopleFilters />\n            )}\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && (\n                <Loader />\n              )}\n\n              {hasError && (\n                <p data-cy=\"peopleLoadingError\">\n                  Something went wrong\n                </p>\n              )}\n\n              {isTableEmpty && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {getFilteredPeople.length > 0 && !hasError\n                && <PeopleTable people={getFilteredPeople} />}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import {\n  Navigate,\n  Route,\n  HashRouter as Router,\n  Routes,\n} from 'react-router-dom';\nimport { App } from '../App';\nimport { HomePage } from './Pages/HomePage';\nimport { PageNotFound } from './Pages/PageNotFound';\nimport { PeoplePage } from './Pages/PeoplePage';\n\nexport const Root = () => {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<HomePage />} />\n          <Route path=\"/home\" element={<Navigate to=\"/\" />} />\n\n          <Route\n            path=\"people\"\n            element={<PeoplePage />}\n          >\n            <Route path=\":slugId\" element={<PeoplePage />} />\n          </Route>\n\n          <Route path=\"*\" element={<PageNotFound />} />\n        </Route>\n      </Routes>\n    </Router>\n  );\n};\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './components/Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}